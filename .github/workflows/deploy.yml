name: Deploy Backend Microservices

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service: [apigateway, auth, identity, device, mail-sender]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment files
        run: |
          # Create env directory and files
          mkdir -p env
          
          # Create apigateway env file
          cat > env/apigateway.env << 'EOF'
          AUTH_GRPC_URL=auth:50052
          IDENTITY_GRPC_URL=identity:50051
          DEVICE_GRPC_URL=device:50054
          PORT=3000
          JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=http://localhost:3000/auth/google/callback
          EOF
          
          # Create identity env file
          cat > env/identity.env << 'EOF'
          DB_HOST=postgres
          DB_PORT=5432
          DB_NAME=homewatt
          DB_USERNAME=admin
          DB_DIALECT=postgres
          DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          RABBIT_MQ_URI=amqp://admin:${{ secrets.RABBITMQ_PASSWORD }}@rabbitmq:5672
          RABBIT_MQ_MAIL_QUEUE=mail_queue
          EOF
          
          # Create auth env file
          cat > env/auth.env << 'EOF'
          IDENTITY_GRPC_URL=identity:50051
          JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}
          JWT_ACCESS_EXPIRATION=${{ vars.JWT_ACCESS_EXPIRATION }}
          JWT_ACCESS_EXPIRATION_SECONDS=${{ vars.JWT_ACCESS_EXPIRATION_SECONDS }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          JWT_REFRESH_EXPIRATION=${{ vars.JWT_REFRESH_EXPIRATION }}
          JWT_REFRESH_EXPIRATION_SECONDS=${{ vars.JWT_REFRESH_EXPIRATION_SECONDS }}
          REDIS_HOST=redis
          REDIS_PORT=6379
          REDIS_URL=redis://redis:6379
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL=http://localhost:3000/auth/google/callback
          EOF
          
          # Create device env file
          cat > env/device.env << 'EOF'
          IDENTITY_GRPC_URL=identity:50051
          AUTH_GRPC_URL=auth:50052
          DB_HOST=postgres
          DB_PORT=5432
          DB_DIALECT=postgres
          DB_NAME=homewatt
          DB_USERNAME=admin
          DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          REDIS_HOST=redis
          REDIS_PORT=6379
          REDIS_URL=redis://redis:6379
          REDIS_DB=${{ vars.REDIS_DEVICE_DB }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          EOF
          
          # Create mail-sender env file
          cat > env/mail-sender.env << 'EOF'
          RABBIT_MQ_URI=amqp://admin:${{ secrets.RABBITMQ_PASSWORD }}@rabbitmq:5672
          RABBIT_MQ_MAIL_QUEUE=mail_queue
          MAIL_HOST=${{ vars.MAIL_HOST }}
          MAIL_PORT=${{ vars.MAIL_PORT }}
          MAIL_SECURE=false
          MAIL_USER=${{ secrets.MAIL_USER }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM_NAME=${{ vars.MAIL_FROM_NAME }}
          MAIL_FROM_ADDRESS=${{ vars.MAIL_FROM_ADDRESS }}
          FRONTEND_URL=${{ vars.FRONTEND_URL }}
          EOF
          
          # Create production docker-compose file
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          
          services:
            apigateway:
              image: ${{ env.DOCKER_USERNAME }}/apigateway:latest
              ports:
                - '3000:3000'
              env_file:
                - ./env/apigateway.env
              environment:
                - NODE_ENV=production
              depends_on:
                - auth
                - identity
                - device
                - mail-sender
              restart: unless-stopped
              networks:
                - homewatt-network

            identity:
              image: ${{ env.DOCKER_USERNAME }}/identity:latest
              ports:
                - '50051:50051'
              env_file:
                - ./env/identity.env
              environment:
                - NODE_ENV=production
              depends_on:
                - postgres
                - redis
              restart: unless-stopped
              networks:
                - homewatt-network
                
            auth:
              image: ${{ env.DOCKER_USERNAME }}/auth:latest
              ports:
                - '50052:50052'
              env_file:
                - ./env/auth.env
              environment:
                - NODE_ENV=production
              depends_on:
                - identity
                - redis
              networks:
                - homewatt-network

            device:
              image: ${{ env.DOCKER_USERNAME }}/device:latest
              ports:
                - '50054:50054'
              env_file:
                - ./env/device.env
              environment:
                - NODE_ENV=production
              depends_on:
                - postgres
                - identity
                - auth
              restart: unless-stopped
              networks:
                - homewatt-network

            mail-sender:
              image: ${{ env.DOCKER_USERNAME }}/mail-sender:latest
              ports:
                - '50053:50053'
              env_file:
                - ./env/mail-sender.env
              environment:
                - NODE_ENV=production
              depends_on:
                - rabbitmq
              restart: unless-stopped
              networks:
                - homewatt-network

            postgres:
              image: postgres:15-alpine
              environment:
                - POSTGRES_USER=admin
                - POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
                - POSTGRES_DB=homewatt
              volumes:
                - postgres-data:/var/lib/postgresql/data
              restart: unless-stopped
              networks:
                - homewatt-network

            redis:
              image: redis:7-alpine
              command: redis-server --requirepass ${{ secrets.REDIS_PASSWORD }}
              environment:
                - REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
              volumes:
                - redis-data:/data
              restart: unless-stopped
              networks:
                - homewatt-network

            rabbitmq:
              image: rabbitmq:3-management-alpine
              environment:
                - RABBITMQ_DEFAULT_USER=admin
                - RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_PASSWORD }}
              volumes:
                - rabbitmq-data:/var/lib/rabbitmq
              restart: unless-stopped
              networks:
                - homewatt-network

          volumes:
            postgres-data:
            redis-data:
            rabbitmq-data:

          networks:
            homewatt-network:
              driver: bridge
          EOF

      - name: Copy deployment files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "docker-compose.prod.yml,env/"
          target: "~/app/homewatt-backend/"

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            # Create application directory
            mkdir -p ~/app/homewatt-backend
            cd ~/app/homewatt-backend

            # Stop existing services
            docker-compose -f docker-compose.prod.yml down || true

            # Clean up old images
            docker system prune -f

            # Pull latest images
            docker pull ${{ env.DOCKER_USERNAME }}/apigateway:latest
            docker pull ${{ env.DOCKER_USERNAME }}/auth:latest
            docker pull ${{ env.DOCKER_USERNAME }}/identity:latest
            docker pull ${{ env.DOCKER_USERNAME }}/device:latest
            docker pull ${{ env.DOCKER_USERNAME }}/mail-sender:latest

            # Start services
            docker-compose -f docker-compose.prod.yml up -d

            # Wait for services to be healthy
            sleep 30

            # Check service status
            docker-compose -f docker-compose.prod.yml ps

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            cd ~/app/homewatt-backend
            
            # Check if all services are running
            if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "Deployment successful! Services are running."
              
              # Health check
              sleep 30
              if curl -f http://localhost:3000/health > /dev/null 2>&1; then
                echo "API Gateway health check passed"
              else
                echo "API Gateway health check failed"
                exit 1
              fi
            else
              echo "Deployment failed! Some services are not running."
              docker-compose -f docker-compose.prod.yml logs --tail=50
              exit 1
            fi

  notify:
    needs: [deploy]
    runs-on: ubuntu-22.04
    if: always()
    
    steps:
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
          fi
