// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/group.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "group";

/** Request message for creating a group */
export interface CreateGroupRequest {
  name: string;
  description: string;
  owner: UserInfo | undefined;
}

/** Request with user information for authentication */
export interface GetAllGroupsRequest {
  user: UserInfo | undefined;
}

/** Response containing all groups */
export interface GetAllGroupsResponse {
  status: ResponseStatus | undefined;
  data: GroupData[];
}

/** Request for getting a specific group */
export interface GroupIdRequest {
  id: string;
  user: UserInfo | undefined;
}

/** Group update request */
export interface UpdateGroupRequest {
  id: string;
  name: string;
  description: string;
  user: UserInfo | undefined;
}

export interface GroupData {
  id: string;
  name: string;
  description: string;
  members: Member[];
}

export interface Member {
  id: string;
  username: string;
  email: string;
  phoneNumber: string;
  groupRole: string;
}

/** Group response object */
export interface GroupResponse {
  status: ResponseStatus | undefined;
  data?: GroupData | undefined;
}

/** Delete response */
export interface DeleteGroupResponse {
  status: ResponseStatus | undefined;
}

/** User information for authentication */
export interface UserInfo {
  id: string;
  role: string;
  email: string;
}

export interface ResponseStatus {
  code: number;
  message: string;
  error?: string | undefined;
}

export const GROUP_PACKAGE_NAME = "group";

export interface GroupServiceClient {
  /** Create a new group by user */

  createGroup(request: CreateGroupRequest): Observable<GroupResponse>;

  /** Get all groups (admin only) */

  getAllGroups(request: GetAllGroupsRequest): Observable<GetAllGroupsResponse>;

  /** Get details of a specific group */

  getGroupById(request: GroupIdRequest): Observable<GroupResponse>;

  /** Update an existing group */

  updateGroup(request: UpdateGroupRequest): Observable<GroupResponse>;

  /** Delete a group */

  deleteGroup(request: GroupIdRequest): Observable<DeleteGroupResponse>;
}

export interface GroupServiceController {
  /** Create a new group by user */

  createGroup(request: CreateGroupRequest): Promise<GroupResponse> | Observable<GroupResponse> | GroupResponse;

  /** Get all groups (admin only) */

  getAllGroups(
    request: GetAllGroupsRequest,
  ): Promise<GetAllGroupsResponse> | Observable<GetAllGroupsResponse> | GetAllGroupsResponse;

  /** Get details of a specific group */

  getGroupById(request: GroupIdRequest): Promise<GroupResponse> | Observable<GroupResponse> | GroupResponse;

  /** Update an existing group */

  updateGroup(request: UpdateGroupRequest): Promise<GroupResponse> | Observable<GroupResponse> | GroupResponse;

  /** Delete a group */

  deleteGroup(
    request: GroupIdRequest,
  ): Promise<DeleteGroupResponse> | Observable<DeleteGroupResponse> | DeleteGroupResponse;
}

export function GroupServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createGroup", "getAllGroups", "getGroupById", "updateGroup", "deleteGroup"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("GroupService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("GroupService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const GROUP_SERVICE_NAME = "GroupService";
