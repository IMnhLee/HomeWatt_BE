// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

/** Empty message for requests that don't need parameters */
export interface Empty {
}

/** Request with user ID */
export interface UserIdRequest {
  id: string;
}

/** Request with user email */
export interface UserEmailRequest {
  email: string;
}

/** Request for creating a user */
export interface CreateUserRequest {
  email: string;
  password: string;
  username: string;
  phoneNumber?:
    | string
    | undefined;
  /** Add additional fields as needed for your CreateUserRequest */
  address?: string | undefined;
}

export interface UpdateUserData {
  username: string;
  phoneNumber?:
    | string
    | undefined;
  /** Các trường cần cập nhật khác */
  address?: string | undefined;
}

/** Request for updating a user */
export interface UpdateUserRequest {
  id: string;
  data: UpdateUserData | undefined;
}

/** Request for validate user */
export interface ValidateUserRequest {
  email: string;
  password: string;
}

/** User information */
export interface UserInfo {
  id: string;
  email: string;
  username: string;
  phoneNumber: string;
  address: string;
  role: string;
  googleId: string;
  emailCode: string;
  createdAt: string;
  updatedAt: string;
}

export interface MonitoringData {
  id: string;
  code: string;
  active: boolean;
}

export interface UserInfoAndMonitoring {
  user: UserInfo | undefined;
  monitoring: MonitoringData[];
}

/** Response containing a single user */
export interface UserResponse {
  status: ResponseStatus | undefined;
  data?: UserInfo | undefined;
}

/** Response containing multiple users */
export interface UsersResponse {
  status: ResponseStatus | undefined;
  data: UserInfoAndMonitoring[];
}

/** Response for delete operation */
export interface DeleteResponse {
  status: ResponseStatus | undefined;
}

export interface ValidateUserResponse {
  status: ResponseStatus | undefined;
  data?: UserInfo | undefined;
}

export interface ResponseStatus {
  /** 0: success, khác 0: error code */
  code: number;
  message: string;
  error?: string | undefined;
}

export interface UpdateUserPasswordRequest {
  id: string;
  password: string;
  currentPassword: string;
}

export interface ForgotPasswordRequest {
  email: string;
}

export interface ForgotPasswordResponse {
  status: ResponseStatus | undefined;
}

export interface ResetPasswordRequest {
  token: string;
  email: string;
  password: string;
}

export interface ResetPasswordResponse {
  status: ResponseStatus | undefined;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  /** Get all users */

  getAllUsers(request: Empty): Observable<UsersResponse>;

  /** Get a user by ID */

  getUserById(request: UserIdRequest): Observable<UserResponse>;

  /** Get a user by email */

  getUserByEmail(request: UserEmailRequest): Observable<UserResponse>;

  /** Create a new user */

  createUser(request: CreateUserRequest): Observable<UserResponse>;

  /** Update a user */

  updateUser(request: UpdateUserRequest): Observable<UserResponse>;

  /** Delete a user */

  deleteUser(request: UserIdRequest): Observable<DeleteResponse>;

  /** Validate user */

  validateUser(request: ValidateUserRequest): Observable<ValidateUserResponse>;

  /** Update user password */

  updateUserPassword(request: UpdateUserPasswordRequest): Observable<UserResponse>;

  /** Forgot password request */

  forgotPassword(request: ForgotPasswordRequest): Observable<ForgotPasswordResponse>;

  resetPassword(request: ResetPasswordRequest): Observable<ResetPasswordResponse>;
}

export interface UserServiceController {
  /** Get all users */

  getAllUsers(request: Empty): Promise<UsersResponse> | Observable<UsersResponse> | UsersResponse;

  /** Get a user by ID */

  getUserById(request: UserIdRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** Get a user by email */

  getUserByEmail(request: UserEmailRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** Create a new user */

  createUser(request: CreateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** Update a user */

  updateUser(request: UpdateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** Delete a user */

  deleteUser(request: UserIdRequest): Promise<DeleteResponse> | Observable<DeleteResponse> | DeleteResponse;

  /** Validate user */

  validateUser(
    request: ValidateUserRequest,
  ): Promise<ValidateUserResponse> | Observable<ValidateUserResponse> | ValidateUserResponse;

  /** Update user password */

  updateUserPassword(
    request: UpdateUserPasswordRequest,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  /** Forgot password request */

  forgotPassword(
    request: ForgotPasswordRequest,
  ): Promise<ForgotPasswordResponse> | Observable<ForgotPasswordResponse> | ForgotPasswordResponse;

  resetPassword(
    request: ResetPasswordRequest,
  ): Promise<ResetPasswordResponse> | Observable<ResetPasswordResponse> | ResetPasswordResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getAllUsers",
      "getUserById",
      "getUserByEmail",
      "createUser",
      "updateUser",
      "deleteUser",
      "validateUser",
      "updateUserPassword",
      "forgotPassword",
      "resetPassword",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
