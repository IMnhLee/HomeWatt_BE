// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/line.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "line";

/** Request to create a new line */
export interface CreateLineRequest {
  code: string;
  monitoringId: string;
}

/** Request to update a line */
export interface EditLineRequest {
  userId: string;
  monitoringId: string;
  lineId: string;
  name: string;
  roomId?: string | undefined;
}

/** Request to disconnect a line */
export interface DisconnectLineRequest {
  lineId: string;
  userId: string;
  monitoringId: string;
}

/** Response containing a line */
export interface LineResponse {
  status: StatusInfo | undefined;
  data?: LineData | undefined;
}

/** Status information */
export interface StatusInfo {
  code: number;
  message: string;
  error: string;
}

/** Line data */
export interface LineData {
  id: string;
  code: string;
  name?: string | undefined;
  active: boolean;
  monitoringId?: string | undefined;
  room?: RoomData | undefined;
}

/** Room data */
export interface RoomData {
  id: string;
  name: string;
  floor?: FloorData | undefined;
}

/** Floor data */
export interface FloorData {
  id: string;
  name: string;
}

export const LINE_PACKAGE_NAME = "line";

export interface LineServiceClient {
  /** Create a new line */

  createLine(request: CreateLineRequest): Observable<LineResponse>;

  /** Update line properties by user */

  editLineByUser(request: EditLineRequest): Observable<LineResponse>;

  /** Disconnect a line from a monitoring device */

  disConnectLine(request: DisconnectLineRequest): Observable<LineResponse>;
}

export interface LineServiceController {
  /** Create a new line */

  createLine(request: CreateLineRequest): Promise<LineResponse> | Observable<LineResponse> | LineResponse;

  /** Update line properties by user */

  editLineByUser(request: EditLineRequest): Promise<LineResponse> | Observable<LineResponse> | LineResponse;

  /** Disconnect a line from a monitoring device */

  disConnectLine(request: DisconnectLineRequest): Promise<LineResponse> | Observable<LineResponse> | LineResponse;
}

export function LineServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createLine", "editLineByUser", "disConnectLine"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("LineService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("LineService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const LINE_SERVICE_NAME = "LineService";
