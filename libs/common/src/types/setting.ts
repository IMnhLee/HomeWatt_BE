// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/setting.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "setting";

/** Request messages */
export interface CreateSettingRequest {
  userId: string;
}

export interface GetSettingRequest {
  userId: string;
}

export interface UpdateSettingRequest {
  userId: string;
  billingCycleStartDay: number;
  energyConsumptionThreshold: number;
}

/** Response messages */
export interface SettingResponse {
  status: Status | undefined;
  data: Setting | undefined;
}

export interface Status {
  code: number;
  message: string;
  error?: string | undefined;
}

export interface Setting {
  priceType: string;
  billingCycleStartDay: number;
  energyConsumptionThreshold: number;
}

export const SETTING_PACKAGE_NAME = "setting";

export interface SettingServiceClient {
  createSetting(request: CreateSettingRequest): Observable<SettingResponse>;

  getSetting(request: GetSettingRequest): Observable<SettingResponse>;

  updateSetting(request: UpdateSettingRequest): Observable<SettingResponse>;
}

export interface SettingServiceController {
  createSetting(
    request: CreateSettingRequest,
  ): Promise<SettingResponse> | Observable<SettingResponse> | SettingResponse;

  getSetting(request: GetSettingRequest): Promise<SettingResponse> | Observable<SettingResponse> | SettingResponse;

  updateSetting(
    request: UpdateSettingRequest,
  ): Promise<SettingResponse> | Observable<SettingResponse> | SettingResponse;
}

export function SettingServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createSetting", "getSetting", "updateSetting"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SettingService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SettingService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SETTING_SERVICE_NAME = "SettingService";
