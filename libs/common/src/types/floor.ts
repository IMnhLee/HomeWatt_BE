// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/floor.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "floor";

/** Request to get all floors for a user */
export interface GetAllFloorRequest {
  userId: string;
}

/** Request to add a new floor */
export interface AddFloorRequest {
  userId: string;
  name: string;
}

/** Request to edit a floor */
export interface EditFloorRequest {
  floorId: string;
  userId: string;
  name: string;
}

/** Request to delete a floor */
export interface DeleteFloorRequest {
  floorId: string;
  userId: string;
}

/** Response containing floor data */
export interface FloorsResponse {
  status: StatusInfo | undefined;
  data: FloorData[];
}

/** Status information */
export interface StatusInfo {
  code: number;
  message: string;
  error?: string | undefined;
}

/** Floor data */
export interface FloorData {
  id: string;
  name: string;
  userId: string;
  rooms: RoomData[];
}

/** Room data */
export interface RoomData {
  id: string;
  name: string;
  floorId: string;
  lines: LineData[];
}

export interface FloorResponse {
  status: StatusInfo | undefined;
  data?: FloorData | undefined;
}

export interface DeleteFloorResponse {
  status: StatusInfo | undefined;
}

/** LineData */
export interface LineData {
  id: string;
  code: string;
  name?: string | undefined;
  monitoringId?: string | undefined;
  monitoringCode?: string | undefined;
  roomId: string;
}

export const FLOOR_PACKAGE_NAME = "floor";

export interface FloorServiceClient {
  /** Get all floors for a user */

  getAllFloor(request: GetAllFloorRequest): Observable<FloorsResponse>;

  /** Get all floors and room */

  getAllFloorAndRoom(request: GetAllFloorRequest): Observable<FloorsResponse>;

  /** Add a new floor */

  addFloor(request: AddFloorRequest): Observable<FloorResponse>;

  /** Edit an existing floor */

  editFloor(request: EditFloorRequest): Observable<FloorResponse>;

  /** Delete a floor */

  deleteFloor(request: DeleteFloorRequest): Observable<FloorResponse>;
}

export interface FloorServiceController {
  /** Get all floors for a user */

  getAllFloor(request: GetAllFloorRequest): Promise<FloorsResponse> | Observable<FloorsResponse> | FloorsResponse;

  /** Get all floors and room */

  getAllFloorAndRoom(
    request: GetAllFloorRequest,
  ): Promise<FloorsResponse> | Observable<FloorsResponse> | FloorsResponse;

  /** Add a new floor */

  addFloor(request: AddFloorRequest): Promise<FloorResponse> | Observable<FloorResponse> | FloorResponse;

  /** Edit an existing floor */

  editFloor(request: EditFloorRequest): Promise<FloorResponse> | Observable<FloorResponse> | FloorResponse;

  /** Delete a floor */

  deleteFloor(request: DeleteFloorRequest): Promise<FloorResponse> | Observable<FloorResponse> | FloorResponse;
}

export function FloorServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAllFloor", "getAllFloorAndRoom", "addFloor", "editFloor", "deleteFloor"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("FloorService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("FloorService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const FLOOR_SERVICE_NAME = "FloorService";
