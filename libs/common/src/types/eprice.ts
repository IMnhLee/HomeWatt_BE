// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/eprice.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "e_price";

/** Common messages */
export interface Status {
  code: number;
  message: string;
  error?: string | undefined;
}

export interface GetConfigRequest {
  userId: string;
}

export interface EditBillingStartDateRequest {
  userId: string;
  billingCycleStartDay: number;
}

export interface EditConfigRequest {
  userId: string;
  priceType: string;
}

export interface GetOnePriceConfigRequest {
  userId: string;
}

export interface OnePriceRequest {
  userId: string;
  price: number;
}

export interface GetPercentPriceConfigRequest {
  userId: string;
}

export interface CreatePercentPriceConfigRequest {
  userId: string;
  name: string;
  price: number;
  percent: number;
}

export interface EditPercentPriceConfigRequest {
  id: string;
  userId: string;
  name: string;
  price: number;
  percent: number;
}

export interface DeletePercentPriceConfigRequest {
  userId: string;
  id: string;
}

export interface GetStairPriceConfigRequest {
  userId: string;
}

export interface CreateStairPriceConfigRequest {
  userId: string;
  step: number;
  minKwh: number;
  maxKwh?: number | undefined;
  price: number;
}

export interface EditStairPriceConfigRequest {
  userId: string;
  id: string;
  step: number;
  minKwh: number;
  maxKwh?: number | undefined;
  price: number;
}

export interface DeleteStairPriceConfigRequest {
  userId: string;
  id: string;
}

export interface Config {
  priceType: string;
}

export interface BillingStartDate {
  billingCycleStartDay: number;
}

export interface ConfigResponse {
  status: Status | undefined;
  data: Config | undefined;
}

export interface BillingStartDateResponse {
  status: Status | undefined;
  data?: BillingStartDate | undefined;
}

export interface OnePriceConfig {
  id: string;
  userId: string;
  price: number;
}

export interface PercentPriceConfig {
  id: string;
  name: string;
  price: number;
  percent: number;
}

export interface StairPriceConfig {
  id: string;
  step: number;
  minKwh: number;
  maxKwh: number;
  price: number;
}

export interface OnePriceResponse {
  status: Status | undefined;
  data: OnePriceConfig | undefined;
}

export interface PercentPriceResponse {
  status: Status | undefined;
  data: PercentPriceConfig[];
}

export interface StairPriceResponse {
  status: Status | undefined;
  data: StairPriceConfig[];
}

export interface DeletePriceConfigResponse {
  status: Status | undefined;
}

export const E_PRICE_PACKAGE_NAME = "e_price";

export interface EPriceServiceClient {
  getStartBillingDate(request: GetConfigRequest): Observable<BillingStartDateResponse>;

  editStartBillingDate(request: EditBillingStartDateRequest): Observable<BillingStartDateResponse>;

  /** Config */

  getConfigPrice(request: GetConfigRequest): Observable<ConfigResponse>;

  editConfigPrice(request: EditConfigRequest): Observable<ConfigResponse>;

  /** One Price Config */

  createOnePriceConfig(request: OnePriceRequest): Observable<OnePriceResponse>;

  getOnePriceConfig(request: GetOnePriceConfigRequest): Observable<OnePriceResponse>;

  editOnePriceConfig(request: OnePriceRequest): Observable<OnePriceResponse>;

  /** Percent Price Config */

  createPercentPriceConfig(request: CreatePercentPriceConfigRequest): Observable<PercentPriceResponse>;

  getPercentPriceConfig(request: GetPercentPriceConfigRequest): Observable<PercentPriceResponse>;

  editPercentPriceConfig(request: EditPercentPriceConfigRequest): Observable<PercentPriceResponse>;

  deletePercentPriceConfig(request: DeletePercentPriceConfigRequest): Observable<DeletePriceConfigResponse>;

  /** Stair Price Config */

  createStairPriceConfig(request: CreateStairPriceConfigRequest): Observable<StairPriceResponse>;

  getStairPriceConfig(request: GetStairPriceConfigRequest): Observable<StairPriceResponse>;

  editStairPriceConfig(request: EditStairPriceConfigRequest): Observable<StairPriceResponse>;

  deleteStairPriceConfig(request: DeleteStairPriceConfigRequest): Observable<DeletePriceConfigResponse>;
}

export interface EPriceServiceController {
  getStartBillingDate(
    request: GetConfigRequest,
  ): Promise<BillingStartDateResponse> | Observable<BillingStartDateResponse> | BillingStartDateResponse;

  editStartBillingDate(
    request: EditBillingStartDateRequest,
  ): Promise<BillingStartDateResponse> | Observable<BillingStartDateResponse> | BillingStartDateResponse;

  /** Config */

  getConfigPrice(request: GetConfigRequest): Promise<ConfigResponse> | Observable<ConfigResponse> | ConfigResponse;

  editConfigPrice(request: EditConfigRequest): Promise<ConfigResponse> | Observable<ConfigResponse> | ConfigResponse;

  /** One Price Config */

  createOnePriceConfig(
    request: OnePriceRequest,
  ): Promise<OnePriceResponse> | Observable<OnePriceResponse> | OnePriceResponse;

  getOnePriceConfig(
    request: GetOnePriceConfigRequest,
  ): Promise<OnePriceResponse> | Observable<OnePriceResponse> | OnePriceResponse;

  editOnePriceConfig(
    request: OnePriceRequest,
  ): Promise<OnePriceResponse> | Observable<OnePriceResponse> | OnePriceResponse;

  /** Percent Price Config */

  createPercentPriceConfig(
    request: CreatePercentPriceConfigRequest,
  ): Promise<PercentPriceResponse> | Observable<PercentPriceResponse> | PercentPriceResponse;

  getPercentPriceConfig(
    request: GetPercentPriceConfigRequest,
  ): Promise<PercentPriceResponse> | Observable<PercentPriceResponse> | PercentPriceResponse;

  editPercentPriceConfig(
    request: EditPercentPriceConfigRequest,
  ): Promise<PercentPriceResponse> | Observable<PercentPriceResponse> | PercentPriceResponse;

  deletePercentPriceConfig(
    request: DeletePercentPriceConfigRequest,
  ): Promise<DeletePriceConfigResponse> | Observable<DeletePriceConfigResponse> | DeletePriceConfigResponse;

  /** Stair Price Config */

  createStairPriceConfig(
    request: CreateStairPriceConfigRequest,
  ): Promise<StairPriceResponse> | Observable<StairPriceResponse> | StairPriceResponse;

  getStairPriceConfig(
    request: GetStairPriceConfigRequest,
  ): Promise<StairPriceResponse> | Observable<StairPriceResponse> | StairPriceResponse;

  editStairPriceConfig(
    request: EditStairPriceConfigRequest,
  ): Promise<StairPriceResponse> | Observable<StairPriceResponse> | StairPriceResponse;

  deleteStairPriceConfig(
    request: DeleteStairPriceConfigRequest,
  ): Promise<DeletePriceConfigResponse> | Observable<DeletePriceConfigResponse> | DeletePriceConfigResponse;
}

export function EPriceServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getStartBillingDate",
      "editStartBillingDate",
      "getConfigPrice",
      "editConfigPrice",
      "createOnePriceConfig",
      "getOnePriceConfig",
      "editOnePriceConfig",
      "createPercentPriceConfig",
      "getPercentPriceConfig",
      "editPercentPriceConfig",
      "deletePercentPriceConfig",
      "createStairPriceConfig",
      "getStairPriceConfig",
      "editStairPriceConfig",
      "deleteStairPriceConfig",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EPriceService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EPriceService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const E_PRICE_SERVICE_NAME = "EPriceService";
