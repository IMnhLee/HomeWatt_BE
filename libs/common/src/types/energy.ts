// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/energy.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "energy_record";

/** Request to get energy consumption and cost */
export interface GetEnergyConsumptionRequest {
  userId: string;
}

/** Request to get time-based energy consumption */
export interface GetTimeEnergyConsumptionRequest {
  userId: string;
  date: string;
  /** 'daily' or 'monthly' */
  viewType: string;
}

/** Request to get current line energy data */
export interface GetLineEnergyDataRequest {
  userId: string;
}

/** Response containing energy consumption and cost data */
export interface GetEnergyConsumptionResponse {
  status: StatusMessage | undefined;
  data?: ConsumptionResult | undefined;
}

/** Response for time-based energy consumption */
export interface GetTimeEnergyConsumptionResponse {
  status: StatusMessage | undefined;
  data?: TimeConsumptionResult | undefined;
}

/** Response for current line energy data */
export interface GetLineEnergyDataResponse {
  status: StatusMessage | undefined;
  data: LineCurrentEnergyData[];
}

/** Current energy data for a single line */
export interface LineCurrentEnergyData {
  lineCode: string;
  lineName: string;
  roomId?: string | undefined;
  roomName?: string | undefined;
  floorId?: string | undefined;
  floorName?:
    | string
    | undefined;
  /** U (V) */
  voltage?:
    | number
    | undefined;
  /** I (A) */
  current?:
    | number
    | undefined;
  /** P (W) */
  power?:
    | number
    | undefined;
  /** E (kWh) */
  energy?:
    | number
    | undefined;
  /** ISO string format */
  recordTime: string;
  /** true if data is from current hour */
  isCurrentHour: boolean;
}

/** Time-based consumption result */
export interface TimeConsumptionResult {
  timeLabels: string[];
  lines: LineData[];
  totalsByTime: number[];
}

/** Line data for time-based consumption */
export interface LineData {
  lineCode: string;
  lineName: string;
  roomId?: string | undefined;
  roomName?: string | undefined;
  floorId?: string | undefined;
  floorName?: string | undefined;
  data: number[];
}

/** Status message for responses */
export interface StatusMessage {
  code: number;
  message: string;
  error?: string | undefined;
}

/** Result of energy consumption calculation */
export interface ConsumptionResult {
  totalEnergy: number;
  totalCost: number;
  currentPrice: number;
  chartData: ChartDataPoint[];
  lineNames: { [key: string]: string };
  lineCosts: { [key: string]: number };
  lineEnergy: { [key: string]: number };
}

export interface ConsumptionResult_LineNamesEntry {
  key: string;
  value: string;
}

export interface ConsumptionResult_LineCostsEntry {
  key: string;
  value: number;
}

export interface ConsumptionResult_LineEnergyEntry {
  key: string;
  value: number;
}

/** Data point for chart visualization */
export interface ChartDataPoint {
  label: string;
  data: { [key: string]: number };
  costs: { [key: string]: number };
  totalEnergy: number;
  totalCost: number;
  timestamp: number;
}

export interface ChartDataPoint_DataEntry {
  key: string;
  value: number;
}

export interface ChartDataPoint_CostsEntry {
  key: string;
  value: number;
}

/** Map entry for line data mapping */
export interface LineDataEntry {
  lineCode: string;
  value: number;
}

/** Map entry for line name mapping */
export interface LineNameEntry {
  lineCode: string;
  name: string;
}

export const ENERGY_RECORD_PACKAGE_NAME = "energy_record";

/** Service definition */

export interface EnergyRecordServiceClient {
  /** Get energy consumption and cost data */

  getEnergyConsumptionAndCost(request: GetEnergyConsumptionRequest): Observable<GetEnergyConsumptionResponse>;

  /** Get energy consumption by time period (daily/monthly) */

  getEnergyConsumption(request: GetTimeEnergyConsumptionRequest): Observable<GetTimeEnergyConsumptionResponse>;

  /** Get current energy data for all lines */

  getLineEnergyData(request: GetLineEnergyDataRequest): Observable<GetLineEnergyDataResponse>;
}

/** Service definition */

export interface EnergyRecordServiceController {
  /** Get energy consumption and cost data */

  getEnergyConsumptionAndCost(
    request: GetEnergyConsumptionRequest,
  ): Promise<GetEnergyConsumptionResponse> | Observable<GetEnergyConsumptionResponse> | GetEnergyConsumptionResponse;

  /** Get energy consumption by time period (daily/monthly) */

  getEnergyConsumption(
    request: GetTimeEnergyConsumptionRequest,
  ):
    | Promise<GetTimeEnergyConsumptionResponse>
    | Observable<GetTimeEnergyConsumptionResponse>
    | GetTimeEnergyConsumptionResponse;

  /** Get current energy data for all lines */

  getLineEnergyData(
    request: GetLineEnergyDataRequest,
  ): Promise<GetLineEnergyDataResponse> | Observable<GetLineEnergyDataResponse> | GetLineEnergyDataResponse;
}

export function EnergyRecordServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getEnergyConsumptionAndCost", "getEnergyConsumption", "getLineEnergyData"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EnergyRecordService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EnergyRecordService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ENERGY_RECORD_SERVICE_NAME = "EnergyRecordService";
