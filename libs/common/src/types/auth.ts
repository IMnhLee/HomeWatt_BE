// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface ValidateTokenRequest {
  token: string;
}

export interface ValidateTokenResponse {
  status: ResponseStatus | undefined;
  user?: UserInfo | undefined;
}

export interface CheckRolesRequest {
  userId: string;
  requiredRoles: string[];
}

export interface CheckRolesResponse {
  status: ResponseStatus | undefined;
}

export interface UserInfo {
  id: string;
  email: string;
  roles: string[];
  /** Add other user fields as needed */
  username: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  status: ResponseStatus | undefined;
  data?: TokenData | undefined;
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface RefreshTokenResponse {
  status: ResponseStatus | undefined;
  data?: TokenData | undefined;
}

export interface TokenData {
  accessToken: string;
  refreshToken: string;
  expiresIn: number;
}

export interface LogoutResponse {
  status: ResponseStatus | undefined;
}

export interface GoogleTokenRequest {
  token: string;
}

export interface ResponseStatus {
  code: number;
  message: string;
  error?: string | undefined;
}

export interface GoogleLoginRequest {
  email: string;
  displayName: string;
  imageUrl?: string | undefined;
}

export interface VerifyTokenRequest {
  token: string;
}

export interface VerifyTokenResponse {
  status: ResponseStatus | undefined;
  data?: JwtPayload | undefined;
}

export interface JwtPayload {
  sub: string;
  email: string;
  roles: string[];
  /** Add any other payload fields as needed */
  iat: number;
  exp: number;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  /** Validate a JWT token and return user info */

  validateToken(request: ValidateTokenRequest): Observable<ValidateTokenResponse>;

  /** Check if a user has required roles */

  checkRoles(request: CheckRolesRequest): Observable<CheckRolesResponse>;

  /** Login endpoint */

  login(request: LoginRequest): Observable<LoginResponse>;

  /** Refresh token endpoint */

  refreshToken(request: RefreshTokenRequest): Observable<RefreshTokenResponse>;

  /** Logout endpoint */

  logout(request: RefreshTokenRequest): Observable<LogoutResponse>;

  /** Google OAuth */

  validateGoogleToken(request: GoogleTokenRequest): Observable<LoginResponse>;

  /** Login with google */

  googleLogin(request: GoogleLoginRequest): Observable<LoginResponse>;

  /** verify token */

  verifyToken(request: VerifyTokenRequest): Observable<VerifyTokenResponse>;
}

export interface AuthServiceController {
  /** Validate a JWT token and return user info */

  validateToken(
    request: ValidateTokenRequest,
  ): Promise<ValidateTokenResponse> | Observable<ValidateTokenResponse> | ValidateTokenResponse;

  /** Check if a user has required roles */

  checkRoles(
    request: CheckRolesRequest,
  ): Promise<CheckRolesResponse> | Observable<CheckRolesResponse> | CheckRolesResponse;

  /** Login endpoint */

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  /** Refresh token endpoint */

  refreshToken(
    request: RefreshTokenRequest,
  ): Promise<RefreshTokenResponse> | Observable<RefreshTokenResponse> | RefreshTokenResponse;

  /** Logout endpoint */

  logout(request: RefreshTokenRequest): Promise<LogoutResponse> | Observable<LogoutResponse> | LogoutResponse;

  /** Google OAuth */

  validateGoogleToken(request: GoogleTokenRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  /** Login with google */

  googleLogin(request: GoogleLoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  /** verify token */

  verifyToken(
    request: VerifyTokenRequest,
  ): Promise<VerifyTokenResponse> | Observable<VerifyTokenResponse> | VerifyTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "validateToken",
      "checkRoles",
      "login",
      "refreshToken",
      "logout",
      "validateGoogleToken",
      "googleLogin",
      "verifyToken",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
