// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/room.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "room";

/** Request to add a new room */
export interface AddRoomRequest {
  name: string;
  floorId: string;
}

/** Request to edit a room */
export interface EditRoomRequest {
  roomId: string;
  name: string;
}

/** Request to delete a room */
export interface DeleteRoomRequest {
  roomId: string;
}

/** Response containing room data */
export interface RoomResponse {
  status: StatusInfo | undefined;
  data?: RoomData | undefined;
}

/** Status information */
export interface StatusInfo {
  code: number;
  message: string;
  error?: string | undefined;
}

/** Room data */
export interface RoomData {
  id: string;
  name: string;
  floorId: string;
}

export interface DeleteRoomResponse {
  status: StatusInfo | undefined;
}

export const ROOM_PACKAGE_NAME = "room";

export interface RoomServiceClient {
  /** Add a new room to a floor */

  addRoom(request: AddRoomRequest): Observable<RoomResponse>;

  /** Edit an existing room */

  editRoom(request: EditRoomRequest): Observable<RoomResponse>;

  /** Delete a room */

  deleteRoom(request: DeleteRoomRequest): Observable<DeleteRoomResponse>;
}

export interface RoomServiceController {
  /** Add a new room to a floor */

  addRoom(request: AddRoomRequest): Promise<RoomResponse> | Observable<RoomResponse> | RoomResponse;

  /** Edit an existing room */

  editRoom(request: EditRoomRequest): Promise<RoomResponse> | Observable<RoomResponse> | RoomResponse;

  /** Delete a room */

  deleteRoom(
    request: DeleteRoomRequest,
  ): Promise<DeleteRoomResponse> | Observable<DeleteRoomResponse> | DeleteRoomResponse;
}

export function RoomServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["addRoom", "editRoom", "deleteRoom"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RoomService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RoomService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ROOM_SERVICE_NAME = "RoomService";
