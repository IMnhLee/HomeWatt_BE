// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/monitoring.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "monitoring";

/** Request to create a new monitoring device */
export interface CreateMonitoringRequest {
  code: string;
  active: boolean;
}

/** Request to add a monitoring device to a user */
export interface AddMonitoringRequest {
  userId: string;
  code: string;
  name: string;
  location?: string | undefined;
}

/** Request to update a monitoring device */
export interface UpdateMonitoringRequest {
  userId: string;
  monitoringId: string;
  name: string;
  location?: string | undefined;
}

/** Request to remove a monitoring device from a user */
export interface RemoveMonitoringRequest {
  monitoringId: string;
}

/** Request to get user's monitoring devices with pagination */
export interface GetMonitoringsRequest {
  userId: string;
  page: number;
  limit: number;
}

/** Response containing a monitoring device */
export interface MonitoringResponse {
  status: StatusInfo | undefined;
  data?: MonitoringData | undefined;
}

/** Response with just status info */
export interface StatusResponse {
  status: StatusInfo | undefined;
}

/** Status information */
export interface StatusInfo {
  code: number;
  message: string;
  error: string;
}

/** Monitoring device data */
export interface MonitoringData {
  id: string;
  code: string;
  name: string;
  location: string;
  active: boolean;
}

/** Room data */
export interface RoomData {
  id: string;
  name: string;
  floor: FloorData | undefined;
}

/** Floor data */
export interface FloorData {
  id: string;
  name: string;
}

/** Line data */
export interface LineData {
  id: string;
  code: string;
  name: string;
  active: boolean;
  room: RoomData | undefined;
}

/** Complete monitoring data with lines */
export interface MonitoringWithLinesData {
  id: string;
  code: string;
  name: string;
  location: string;
  active: boolean;
  lines: LineData[];
}

/** Pagination metadata */
export interface PaginationMeta {
  page: number;
  limit: number;
  totalCount: number;
  totalPages: number;
}

/** Response containing list of monitoring devices with pagination */
export interface GetMonitoringsResponse {
  status: StatusInfo | undefined;
  data?: MonitoringsData | undefined;
}

/** Container for monitoring list and pagination info */
export interface MonitoringsData {
  data: MonitoringWithLinesData[];
  meta: PaginationMeta | undefined;
}

export const MONITORING_PACKAGE_NAME = "monitoring";

export interface MonitoringServiceClient {
  /** Create a new monitoring device */

  createMonitoring(request: CreateMonitoringRequest): Observable<MonitoringResponse>;

  /** Add a monitoring device to a user */

  addMonitoringByUser(request: AddMonitoringRequest): Observable<MonitoringResponse>;

  /** Update monitoring device properties */

  updateMonitoringByOwner(request: UpdateMonitoringRequest): Observable<StatusResponse>;

  /** Remove a monitoring device from a user */

  removeMonitoringByOwner(request: RemoveMonitoringRequest): Observable<StatusResponse>;

  /** Get all monitoring devices for a user */

  getMonitoringsByOwner(request: GetMonitoringsRequest): Observable<GetMonitoringsResponse>;
}

export interface MonitoringServiceController {
  /** Create a new monitoring device */

  createMonitoring(
    request: CreateMonitoringRequest,
  ): Promise<MonitoringResponse> | Observable<MonitoringResponse> | MonitoringResponse;

  /** Add a monitoring device to a user */

  addMonitoringByUser(
    request: AddMonitoringRequest,
  ): Promise<MonitoringResponse> | Observable<MonitoringResponse> | MonitoringResponse;

  /** Update monitoring device properties */

  updateMonitoringByOwner(
    request: UpdateMonitoringRequest,
  ): Promise<StatusResponse> | Observable<StatusResponse> | StatusResponse;

  /** Remove a monitoring device from a user */

  removeMonitoringByOwner(
    request: RemoveMonitoringRequest,
  ): Promise<StatusResponse> | Observable<StatusResponse> | StatusResponse;

  /** Get all monitoring devices for a user */

  getMonitoringsByOwner(
    request: GetMonitoringsRequest,
  ): Promise<GetMonitoringsResponse> | Observable<GetMonitoringsResponse> | GetMonitoringsResponse;
}

export function MonitoringServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createMonitoring",
      "addMonitoringByUser",
      "updateMonitoringByOwner",
      "removeMonitoringByOwner",
      "getMonitoringsByOwner",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("MonitoringService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("MonitoringService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const MONITORING_SERVICE_NAME = "MonitoringService";
