// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/member.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "member_group";

/** Request containing group ID and user ID */
export interface MemberRequest {
  groupId: string;
  userId: string;
  /** User making the request (for authorization) */
  requestor: UserInfo | undefined;
}

/** Request for a specific group */
export interface GroupIdRequest {
  groupId: string;
  requestor: UserInfo | undefined;
}

/** Request to update a member's role */
export interface UpdateRoleRequest {
  groupId: string;
  userId: string;
  role: string;
  requestor: UserInfo | undefined;
}

/** Response with status and member data */
export interface MemberResponse {
  status: ResponseStatus | undefined;
  data?: MemberData | undefined;
}

/** Response for getting all members */
export interface GetMembersResponse {
  status: ResponseStatus | undefined;
  data: MemberData[];
}

/** Response for removal operation */
export interface RemoveResponse {
  status: ResponseStatus | undefined;
}

/** Member data structure */
export interface MemberData {
  id: string;
  userId: string;
  groupId: string;
  role: string;
  /** Includes user details */
  user?: UserData | undefined;
}

/** User data structure */
export interface UserData {
  id: string;
  email: string;
  username: string;
  phoneNumber: string;
  role: string;
}

/** User info for authorization */
export interface UserInfo {
  id: string;
  role: string;
  email: string;
}

/** Standard response status */
export interface ResponseStatus {
  code: number;
  message: string;
  error?: string | undefined;
}

export const MEMBER_GROUP_PACKAGE_NAME = "member_group";

export interface MemberGroupServiceClient {
  /** Add a member to a group */

  addMemberToGroup(request: MemberRequest): Observable<MemberResponse>;

  /** Get all members in a group */

  getMembersByGroupId(request: GroupIdRequest): Observable<GetMembersResponse>;

  /** Update a member's role in a group */

  updateMemberRole(request: UpdateRoleRequest): Observable<MemberResponse>;

  /** Remove a member from a group */

  removeMemberFromGroup(request: MemberRequest): Observable<RemoveResponse>;
}

export interface MemberGroupServiceController {
  /** Add a member to a group */

  addMemberToGroup(request: MemberRequest): Promise<MemberResponse> | Observable<MemberResponse> | MemberResponse;

  /** Get all members in a group */

  getMembersByGroupId(
    request: GroupIdRequest,
  ): Promise<GetMembersResponse> | Observable<GetMembersResponse> | GetMembersResponse;

  /** Update a member's role in a group */

  updateMemberRole(request: UpdateRoleRequest): Promise<MemberResponse> | Observable<MemberResponse> | MemberResponse;

  /** Remove a member from a group */

  removeMemberFromGroup(request: MemberRequest): Promise<RemoveResponse> | Observable<RemoveResponse> | RemoveResponse;
}

export function MemberGroupServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "addMemberToGroup",
      "getMembersByGroupId",
      "updateMemberRole",
      "removeMemberFromGroup",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("MemberGroupService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("MemberGroupService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const MEMBER_GROUP_SERVICE_NAME = "MemberGroupService";
