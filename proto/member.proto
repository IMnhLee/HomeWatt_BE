syntax = "proto3";

package member_group;

service MemberGroupService {
  // Add a member to a group
  rpc AddMemberToGroup(MemberRequest) returns (MemberResponse);
  
  // Get all members in a group
  rpc GetMembersByGroupId(GroupIdRequest) returns (GetMembersResponse);
  
  // Update a member's role in a group
  rpc UpdateMemberRole(UpdateRoleRequest) returns (MemberResponse);
  
  // Remove a member from a group
  rpc RemoveMemberFromGroup(MemberRequest) returns (RemoveResponse);
}

// Request containing group ID and user ID
message MemberRequest {
  string group_id = 1;
  string user_id = 2;
  UserInfo requestor = 3; // User making the request (for authorization)
}

// Request for a specific group
message GroupIdRequest {
  string group_id = 1;
  UserInfo requestor = 2;
}

// Request to update a member's role
message UpdateRoleRequest {
  string group_id = 1;
  string user_id = 2;
  string role = 3;
  UserInfo requestor = 4;
}

// Response with status and member data
message MemberResponse {
  ResponseStatus status = 1;
  optional MemberData data = 2;
}

// Response for getting all members
message GetMembersResponse {
  ResponseStatus status = 1;
  repeated MemberData data = 2;
}

// Response for removal operation
message RemoveResponse {
  ResponseStatus status = 1;
}

// Member data structure
message MemberData {
  string id = 1; 
  string user_id = 2;
  string group_id = 3;
  string role = 4;
  optional UserData user = 5; // Includes user details
}

// User data structure
message UserData {
    string id = 1;
    string email = 2;
    string username = 3;
    string phoneNumber = 4;
    string role = 5;
}

// User info for authorization
message UserInfo {
  string id = 1;
  string role = 2;
  string email = 3;
}

// Standard response status
message ResponseStatus {
  int32 code = 1;
  string message = 2;
  optional string error = 3;
}